import clsx from 'clsx';
import { JSX, SVGProps } from 'react';

export type IconProps = JSX.IntrinsicElements['svg'] & {
	direction?: 'up' | 'right' | 'down' | 'left';
};

export function Icon({
	children,
	className,
	fill = 'currentColor',
	stroke,
	...props
}: IconProps) {
	return (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 20 20"
			{...props}
			fill={fill}
			stroke={stroke}
			className={clsx('w-5 h-5', className)}
		>
			{children}
		</svg>
	);
}

export function IconMenu(props: IconProps) {
	return (
		<Icon {...props} stroke={props.stroke || 'currentColor'}>
			<title>Menu</title>
			<line x1="3" y1="6.375" x2="17" y2="6.375" strokeWidth="1.25" />
			<line x1="3" y1="10.375" x2="17" y2="10.375" strokeWidth="1.25" />
			<line x1="3" y1="14.375" x2="17" y2="14.375" strokeWidth="1.25" />
		</Icon>
	);
}

export function IconClose(props: IconProps) {
	return (
		<Icon {...props} stroke={props.stroke || 'currentColor'}>
			<title>Close</title>
			<line
				x1="4.44194"
				y1="4.30806"
				x2="15.7556"
				y2="15.6218"
				strokeWidth="1.25"
			/>
			<line
				y1="-0.625"
				x2="16"
				y2="-0.625"
				transform="matrix(-0.707107 0.707107 0.707107 0.707107 16 4.75)"
				strokeWidth="1.25"
			/>
		</Icon>
	);
}

export function IconArrow({ direction = 'right' }: IconProps) {
	let rotate;

	switch (direction) {
		case 'right':
			rotate = 'rotate-0';
			break;
		case 'left':
			rotate = 'rotate-180';
			break;
		case 'up':
			rotate = '-rotate-90';
			break;
		case 'down':
			rotate = 'rotate-90';
			break;
		default:
			rotate = 'rotate-0';
	}

	return (
		<Icon className={clsx('w-5 h-5', rotate)}>
			<title>Arrow</title>
			<path d="M7 3L14 10L7 17" strokeWidth="1.25" />
		</Icon>
	);
}

export function IconCaret({
	direction = 'down',
	stroke = 'currentColor',
	...props
}: IconProps) {
	let rotate;

	switch (direction) {
		case 'down':
			rotate = 'rotate-0';
			break;
		case 'up':
			rotate = 'rotate-180';
			break;
		case 'left':
			rotate = '-rotate-90';
			break;
		case 'right':
			rotate = 'rotate-90';
			break;
		default:
			rotate = 'rotate-0';
	}

	return (
		<Icon
			{...props}
			className={clsx('w-5 h-5 transition', rotate)}
			fill="transparent"
			stroke={stroke}
		>
			<title>Caret</title>
			<path d="M14 8L10 12L6 8" strokeWidth="1.25" />
		</Icon>
	);
}

export function IconSelect(props: IconProps) {
	return (
		<Icon {...props}>
			<title>Select</title>
			<path d="M7 8.5L10 6.5L13 8.5" strokeWidth="1.25" />
			<path d="M13 11.5L10 13.5L7 11.5" strokeWidth="1.25" />
		</Icon>
	);
}

export function IconBag(props: IconProps) {
	return (
		<Icon {...props}>
			<title>Bag</title>
			<path
				fillRule="evenodd"
				d="M8.125 5a1.875 1.875 0 0 1 3.75 0v.375h-3.75V5Zm-1.25.375V5a3.125 3.125 0 1 1 6.25 0v.375h3.5V15A2.625 2.625 0 0 1 14 17.625H6A2.625 2.625 0 0 1 3.375 15V5.375h3.5ZM4.625 15V6.625h10.75V15c0 .76-.616 1.375-1.375 1.375H6c-.76 0-1.375-.616-1.375-1.375Z"
			/>
		</Icon>
	);
}

export function IconLogin(props: IconProps) {
	return (
		<Icon {...props}>
			<title>Login</title>
			<g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
				<path
					d="M8,10.6928545 C10.362615,10.6928545 12.4860225,11.7170237 13.9504747,13.3456144 C12.4860225,14.9758308 10.362615,16 8,16 C5.63738499,16 3.51397752,14.9758308 2.04952533,13.3472401 C3.51397752,11.7170237 5.63738499,10.6928545 8,10.6928545 Z"
					fill="currentColor"
				></path>
				<path
					d="M8,3.5 C6.433,3.5 5.25,4.894 5.25,6.5 C5.25,8.106 6.433,9.5 8,9.5 C9.567,9.5 10.75,8.106 10.75,6.5 C10.75,4.894 9.567,3.5 8,3.5 Z"
					fill="currentColor"
					fillRule="nonzero"
				></path>
			</g>
		</Icon>
	);
}

export function IconAccount(props: IconProps) {
	return (
		<Icon {...props}>
			<title>Account</title>
			<path
				fillRule="evenodd"
				d="M9.9998 12.625c-1.9141 0-3.6628.698-5.0435 1.8611C3.895 13.2935 3.25 11.7221 3.25 10c0-3.728 3.022-6.75 6.75-6.75 3.7279 0 6.75 3.022 6.75 6.75 0 1.7222-.645 3.2937-1.7065 4.4863-1.3807-1.1632-3.1295-1.8613-5.0437-1.8613ZM10 18c-2.3556 0-4.4734-1.0181-5.9374-2.6382C2.7806 13.9431 2 12.0627 2 10c0-4.4183 3.5817-8 8-8s8 3.5817 8 8-3.5817 8-8 8Zm0-12.5c-1.567 0-2.75 1.394-2.75 3s1.183 3 2.75 3 2.75-1.394 2.75-3-1.183-3-2.75-3Z"
			/>
		</Icon>
	);
}

export function IconHelp(props: IconProps) {
	return (
		<Icon {...props}>
			<title>Help</title>
			<path d="M3.375 10a6.625 6.625 0 1 1 13.25 0 6.625 6.625 0 0 1-13.25 0ZM10 2.125a7.875 7.875 0 1 0 0 15.75 7.875 7.875 0 0 0 0-15.75Zm.699 10.507H9.236V14h1.463v-1.368ZM7.675 7.576A3.256 3.256 0 0 0 7.5 8.67h1.245c0-.496.105-.89.316-1.182.218-.299.553-.448 1.005-.448a1 1 0 0 1 .327.065c.124.044.24.113.35.208.108.095.2.223.272.383.08.154.12.34.12.558a1.3 1.3 0 0 1-.076.471c-.044.131-.11.252-.197.361-.08.102-.174.197-.283.285-.102.087-.212.182-.328.284a3.157 3.157 0 0 0-.382.383c-.102.124-.19.27-.262.438a2.476 2.476 0 0 0-.164.591 6.333 6.333 0 0 0-.043.81h1.179c0-.263.021-.485.065-.668a1.65 1.65 0 0 1 .207-.47c.088-.139.19-.263.306-.372.117-.11.244-.223.382-.34l.35-.306c.116-.11.218-.23.305-.361.095-.139.168-.3.219-.482.058-.19.087-.412.087-.667 0-.35-.062-.664-.186-.942a1.881 1.881 0 0 0-.513-.689 2.07 2.07 0 0 0-.753-.427A2.721 2.721 0 0 0 10.12 6c-.4 0-.764.066-1.092.197a2.36 2.36 0 0 0-.83.536c-.225.234-.4.515-.523.843Z" />
		</Icon>
	);
}

export function IconSearch(props: IconProps) {
	return (
		<Icon {...props}>
			<title>Search</title>
			<path
				fillRule="evenodd"
				d="M13.3 8.52a4.77 4.77 0 1 1-9.55 0 4.77 4.77 0 0 1 9.55 0Zm-.98 4.68a6.02 6.02 0 1 1 .88-.88l4.3 4.3-.89.88-4.3-4.3Z"
			/>
		</Icon>
	);
}

export function IconCheck({
	stroke = 'currentColor',
	...props
}: React.ComponentProps<typeof Icon>) {
	return (
		<Icon {...props} fill="transparent" stroke={stroke}>
			<title>Check</title>
			<circle cx="10" cy="10" r="7.25" strokeWidth="1.25" />
			<path
				strokeLinecap="round"
				strokeLinejoin="round"
				strokeWidth="1.5"
				d="m7.04 10.37 2.42 2.41 3.5-5.56"
			/>
		</Icon>
	);
}

export function IconXMark({
	stroke = 'currentColor',
	...props
}: React.ComponentProps<typeof Icon>) {
	return (
		<Icon {...props} fill="transparent" stroke={stroke}>
			<title>Delete</title>
			<path
				strokeLinecap="round"
				strokeLinejoin="round"
				d="M6 18L18 6M6 6l12 12"
			/>
		</Icon>
	);
}

export function IconRemove(props: IconProps) {
	return (
		<Icon {...props} fill="transparent" stroke={props.stroke || 'currentColor'}>
			<title>Remove</title>
			<path
				d="M4 6H16"
				strokeWidth="1.25"
				strokeLinecap="round"
				strokeLinejoin="round"
			/>
			<path d="M8.5 9V14" strokeLinecap="round" strokeLinejoin="round" />
			<path d="M11.5 9V14" strokeLinecap="round" strokeLinejoin="round" />
			<path
				d="M5.5 6L6 17H14L14.5 6"
				strokeWidth="1.25"
				strokeLinecap="round"
				strokeLinejoin="round"
			/>
			<path
				d="M8 6L8 5C8 4 8.75 3 10 3C11.25 3 12 4 12 5V6"
				strokeWidth="1.25"
			/>
		</Icon>
	);
}

export function IconFilters(props: IconProps) {
	return (
		<Icon {...props} fill="transparent" stroke={props.stroke || 'currentColor'}>
			<title>Filters</title>
			<circle cx="4.5" cy="6.5" r="2" />
			<line x1="6" y1="6.5" x2="14" y2="6.5" />
			<line x1="4.37114e-08" y1="6.5" x2="3" y2="6.5" />
			<line x1="4.37114e-08" y1="13.5" x2="8" y2="13.5" />
			<line x1="11" y1="13.5" x2="14" y2="13.5" />
			<circle cx="9.5" cy="13.5" r="2" />
		</Icon>
	);
}

export const EarthIcon = (props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) => (
  <svg
    width={13}
    height={13}
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M9.53674e-06 6.49164C0.00609303 2.90428 2.93072 -0.00947952 6.51578 2.38419e-05C10.0963 0.00952721 13.0057 2.92975 13 6.50875C12.9943 10.0957 10.0708 13.0083 6.48422 13C2.90448 12.9916 -0.00607395 10.0703 9.53674e-06 6.49164ZM4.09798 6.87482C4.11471 7.59252 4.19418 8.28741 4.33904 8.98572C5.78576 8.89183 7.22298 8.89525 8.6621 8.98534C8.8043 8.28095 8.88985 7.58644 8.89936 6.87482H4.09798ZM4.33714 4.01352C4.1976 4.71944 4.10787 5.41623 4.10178 6.12291H8.90164C8.88643 5.40977 8.80582 4.71525 8.66134 4.01428C7.22222 4.10665 5.78919 4.10589 4.33714 4.01352ZM8.47427 3.28251C8.46477 3.23994 8.45945 3.20763 8.4507 3.17684C8.27466 2.55493 7.99824 1.98016 7.62905 1.45025C7.45491 1.2005 7.23363 1.00207 6.96672 0.856475C6.67053 0.694916 6.36445 0.684652 6.06674 0.841269C5.9215 0.917677 5.77968 1.01385 5.66333 1.12865C5.06563 1.71711 4.76336 2.46636 4.53257 3.25248C4.52953 3.26313 4.53979 3.27757 4.54322 3.28898C5.15498 3.37983 7.96973 3.37755 8.47427 3.28328V3.28251ZM8.49024 9.70875C7.1515 9.62246 5.8428 9.62246 4.51774 9.70951C4.65766 10.2349 4.85613 10.7093 5.11963 11.1567C5.29338 11.4521 5.47589 11.7413 5.75231 11.9557C5.95686 12.1143 6.17054 12.2515 6.44164 12.2644C6.81881 12.2827 7.1074 12.1032 7.36024 11.8516C7.7857 11.4274 8.05984 10.9096 8.26706 10.3527C8.34386 10.1459 8.41192 9.93569 8.49024 9.70875ZM9.42862 9.0397C9.44877 9.04351 9.47615 9.04997 9.5039 9.05339C10.1537 9.13284 10.8035 9.21039 11.4525 9.29364C11.5411 9.30504 11.5681 9.25752 11.6 9.19632C11.8327 8.75346 12.0141 8.29007 12.1171 7.80046C12.181 7.49748 12.2205 7.18957 12.2719 6.87862H9.66473C9.58565 7.60354 9.5077 8.3144 9.42862 9.0397ZM3.33489 6.12557C3.41473 5.39532 3.49306 4.68104 3.57214 3.95992C3.54933 3.95574 3.51777 3.9489 3.48545 3.94472C2.84061 3.86565 2.19538 3.78886 1.55091 3.70637C1.46422 3.69534 1.42848 3.7345 1.40225 3.80064C1.24446 4.20093 1.06233 4.59399 0.938764 5.00492C0.831162 5.36339 0.790099 5.74163 0.716718 6.12557H3.33489ZM0.745614 6.8733C0.802647 7.71416 1.02621 8.49117 1.41289 9.22255C1.45966 9.31112 1.51974 9.2944 1.59046 9.28489C2.00869 9.22939 2.42731 9.17351 2.84593 9.12143C3.09345 9.09064 3.34173 9.06631 3.57138 9.04123C3.49154 8.30946 3.41359 7.5948 3.33489 6.87292H0.745614V6.8733ZM12.2544 6.12557C12.197 5.28774 11.9753 4.5153 11.5924 3.78696C11.5441 3.69496 11.4844 3.70485 11.4065 3.71473C10.8985 3.7805 10.3906 3.84474 9.88222 3.90784C9.72443 3.92761 9.56588 3.94319 9.42862 3.95802C9.50846 4.69169 9.58641 5.40635 9.66473 6.12519H12.2544V6.12557ZM1.91934 3.0149C1.93683 3.02174 1.95318 3.03238 1.97067 3.03429C2.54594 3.10005 3.12083 3.16619 3.69647 3.22587C3.72651 3.22892 3.7805 3.1795 3.79305 3.14415C3.85921 2.95636 3.90978 2.76363 3.97593 2.57584C4.17251 2.01818 4.44816 1.50005 4.78694 1.00891C3.96909 1.12447 2.39461 2.22725 1.91934 3.0149ZM11.0978 9.98321C11.0449 9.97066 11.0179 9.96116 10.9902 9.95774C10.448 9.89654 9.90579 9.83875 9.36436 9.77337C9.25942 9.76083 9.21608 9.78401 9.1887 9.89121C9.00392 10.6097 8.69518 11.273 8.28189 11.8881C8.26021 11.92 8.24196 11.9542 8.20812 12.0109C9.39288 11.6281 10.3408 10.9605 11.0978 9.98321ZM4.79872 12.0131C4.70215 11.8668 4.61774 11.747 4.54094 11.622C4.21015 11.0845 3.98506 10.5017 3.81358 9.89692C3.78659 9.80112 3.75541 9.75703 3.64096 9.77185C3.32082 9.81367 2.9984 9.83571 2.67787 9.87183C2.42465 9.90034 2.17257 9.93835 1.89691 9.97522C2.66 10.9617 3.61169 11.6307 4.7991 12.0128L4.79872 12.0131ZM11.1035 3.02478C10.3408 2.03832 9.38946 1.36966 8.20052 0.987242C8.27504 1.09824 8.33321 1.18415 8.38987 1.27083C8.75754 1.83153 8.99897 2.44811 9.18186 3.08941C9.21266 3.19699 9.24573 3.24488 9.37273 3.2274C9.68755 3.18444 10.0054 3.16391 10.3214 3.12818C10.5746 3.09967 10.8271 3.06166 11.1031 3.02478H11.1035Z"
      fill="#2A2A29"
    />
  </svg>
);

export const Stat1Icon = (props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) => (
  <svg
    width={28}
    height={29}
    viewBox="0 0 28 29"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <g clipPath="url(#clip0_600_5937)">
      <path
        d="M15.6696 22.7871C15.6696 23.2677 15.6608 23.7103 15.6728 24.1522C15.68 24.4163 15.5727 24.5819 15.3494 24.7119C12.9541 26.102 10.5603 27.4953 8.17064 28.895C7.93687 29.0323 7.74313 29.038 7.50536 28.8983C5.12446 27.5025 2.74036 26.1133 0.352256 24.7305C0.108081 24.5883 4.16908e-06 24.4163 4.16908e-06 24.1287C0.00720932 21.347 0.00800989 18.566 4.16908e-06 15.7851C-0.000796403 15.4935 0.113685 15.3263 0.357059 15.1866C1.9598 14.2634 3.55374 13.3256 5.15729 12.4024C5.35103 12.2909 5.42628 12.1682 5.44709 11.938C5.85619 7.35584 9.28023 3.68157 13.7891 2.96917C19.1497 2.12269 24.2493 5.92054 25.0403 11.3484C25.8529 16.928 21.9581 22.0667 16.4173 22.7217C16.1796 22.75 15.941 22.7637 15.6704 22.7879L15.6696 22.7871ZM14.8986 16.302C14.7722 16.3715 14.6865 16.4159 14.6032 16.4644C12.5634 17.6517 10.5259 18.8431 8.48126 20.0215C8.27792 20.1387 8.21467 20.2679 8.21547 20.4965C8.22348 22.8655 8.22028 25.2337 8.22108 27.6027C8.22108 27.7069 8.23148 27.8119 8.23789 27.946C8.35477 27.8838 8.43323 27.845 8.50928 27.8006C10.5571 26.6076 12.6034 25.4106 14.6553 24.224C14.849 24.1118 14.9034 23.9874 14.9034 23.7717C14.8954 21.393 14.8986 19.0143 14.8986 16.6356V16.3012V16.302ZM5.37024 18.9715C5.37024 19.818 5.36784 20.6023 5.37184 21.3858C5.37264 21.5998 5.35023 21.7993 5.12206 21.8825C4.8995 21.9633 4.74179 21.8429 4.60169 21.6806C4.4776 21.536 4.3271 21.4116 4.21982 21.2557C3.99406 20.9286 3.74668 20.8551 3.36641 21.0207C2.9397 21.2064 2.72835 21.0279 2.72755 20.5562C2.72595 19.5894 2.72355 18.6218 2.73075 17.6549C2.73156 17.495 2.68912 17.4013 2.54582 17.3214C2.02305 17.0282 1.50828 16.7196 0.989511 16.4192C0.927066 16.3828 0.855815 16.3634 0.778961 16.3319C0.771755 16.3965 0.766151 16.4264 0.766151 16.4563C0.766151 18.9247 0.762149 21.393 0.774157 23.8606C0.774157 23.9745 0.886237 24.1344 0.990312 24.1958C3.05819 25.4122 5.13247 26.6173 7.20595 27.824C7.2772 27.8652 7.35486 27.8959 7.45573 27.9435C7.45573 25.3791 7.45653 22.8606 7.45093 20.3422C7.45093 20.2687 7.39729 20.1621 7.33724 20.1257C6.70399 19.7461 6.06514 19.377 5.37024 18.9715ZM20.1352 8.47129C20.3073 9.77412 20.4818 11.0947 20.6596 12.4371H24.3766C24.287 10.5552 23.6977 8.87595 22.6298 7.40511C21.7611 7.77585 20.9286 8.13124 20.1344 8.47048L20.1352 8.47129ZM20.1336 17.176C20.935 17.5176 21.7732 17.8746 22.6322 18.2405C23.6913 16.764 24.2821 15.105 24.3742 13.2416H20.658C20.4802 14.5751 20.3057 15.8844 20.1336 17.176ZM1.15443 15.6203C1.78608 15.9894 2.3753 16.3271 2.95652 16.6792C3.11423 16.7753 3.23031 16.7697 3.38802 16.6768C5.4575 15.4644 7.53098 14.2593 9.60286 13.051C9.67411 13.0098 9.73816 12.9573 9.83103 12.8919C9.2298 12.5413 8.65659 12.2166 8.09459 11.8734C7.91125 11.7611 7.77756 11.753 7.58542 11.8669C6.435 12.5518 5.27497 13.2206 4.11815 13.8951C3.14305 14.4629 2.16875 15.0307 1.15523 15.6203H1.15443ZM5.82176 18.3399C6.44141 18.7009 7.02342 19.0297 7.59343 19.3794C7.77196 19.4893 7.90085 19.4804 8.07858 19.3762C10.0424 18.2236 12.0118 17.0807 13.9796 15.9345C14.1461 15.8376 14.3102 15.7366 14.5088 15.6171C13.8811 15.2512 13.2911 14.9168 12.7123 14.563C12.5506 14.4637 12.4369 14.479 12.2824 14.5695C10.8534 15.4095 9.41953 16.2415 7.98651 17.0766C7.2796 17.4886 6.5735 17.9005 5.82176 18.3399ZM11.2304 8.70714C10.9326 9.88074 10.7557 11.1303 10.7509 12.4194H14.8858V9.15784C13.6658 9.00761 12.4705 8.8598 11.2296 8.70714H11.2304ZM15.684 12.4258H19.8142C19.7869 11.1343 19.6308 9.88478 19.3258 8.70472C18.0953 8.85737 16.8945 9.00599 15.684 9.15704V12.4266V12.4258ZM19.3274 16.9425C19.626 15.7471 19.7917 14.5105 19.811 13.2344H15.688V16.4894C16.9033 16.6413 18.0961 16.7899 19.3274 16.9425ZM7.93207 7.40754C7.01942 8.66999 6.4318 10.1004 6.23646 11.7651C6.62954 11.5365 6.98259 11.3685 7.29321 11.1416C7.67188 10.8653 7.99291 10.8815 8.37799 11.1408C8.87995 11.4784 9.41953 11.7579 9.92149 12.0494C10.0952 10.8306 10.2657 9.63439 10.4307 8.47533C9.60686 8.12317 8.78468 7.77181 7.93207 7.40673V7.40754ZM11.465 7.95759C12.6066 8.09894 13.7346 8.23786 14.8962 8.38163V3.69288C13.5489 3.82373 12.1055 5.6645 11.465 7.95839V7.95759ZM15.696 8.37921C16.8472 8.23544 17.9656 8.09571 19.1681 7.94547C18.8719 7.27346 18.6397 6.68625 18.3579 6.12409C17.9808 5.37372 17.5037 4.68556 16.8112 4.19528C16.4862 3.96508 16.1067 3.81242 15.6952 3.59515V8.3784L15.696 8.37921ZM15.6872 21.9374C16.9929 21.8494 18.4916 19.919 19.0848 17.684C17.9544 17.5467 16.8344 17.4102 15.6872 17.2705V21.9374ZM3.94442 17.2462C4.25184 17.4256 4.52484 17.5685 4.78022 17.7389C4.96755 17.8641 5.11166 17.869 5.315 17.7486C6.84649 16.8424 8.3876 15.9523 9.92469 15.0565C10.5187 14.71 11.1119 14.3627 11.7308 14.0009C11.4154 13.8151 11.1247 13.6592 10.8502 13.4775C10.6852 13.3684 10.5619 13.3781 10.3938 13.4775C8.43643 14.626 6.47423 15.7657 4.51363 16.9078C4.3351 17.012 4.15817 17.1186 3.94442 17.2462ZM19.8606 17.9029C19.3915 19.3099 18.8038 20.57 17.7919 21.6353C19.277 21.2921 21.4065 19.9157 22.1054 18.8423C21.3633 18.5321 20.6315 18.226 19.8598 17.9029H19.8606ZM17.7919 4.01435C18.8174 5.0878 19.3899 6.34944 19.8646 7.74193C20.6275 7.42208 21.3649 7.11272 22.1198 6.7961C21.212 5.60311 19.1953 4.30674 17.7919 4.01435ZM10.6932 7.74112C11.1632 6.35105 11.7404 5.0983 12.6891 4.04585C11.0215 4.53613 9.62608 5.4343 8.42442 6.79287C9.20498 7.11918 9.9351 7.4245 10.6932 7.74193V7.74112ZM14.8834 14.9418V13.2239H11.9365C12.9589 13.8199 13.9043 14.3708 14.8834 14.9418ZM4.60089 20.5159C4.60089 19.8422 4.60329 19.234 4.59609 18.6258C4.59609 18.5701 4.54405 18.4925 4.49441 18.4627C4.18139 18.2737 3.86276 18.0943 3.51772 17.8965V20.1362C3.90519 20.077 4.26625 20.2038 4.60089 20.5167V20.5159Z"
        fill="black"
      />
      <path
        d="M18.3988 25.2748C18.7014 25.4412 18.9408 25.5639 19.1721 25.7004C19.4051 25.8377 19.4836 26.0663 19.3627 26.2569C19.225 26.4742 19.0272 26.4944 18.8143 26.3797C18.2859 26.0954 17.7591 25.8095 17.2348 25.5171C17.017 25.3959 16.9514 25.2013 17.0674 24.9783C17.3548 24.4259 17.6495 23.8774 17.9505 23.3314C18.0674 23.1206 18.2675 23.0746 18.466 23.1836C18.6678 23.2943 18.7222 23.4865 18.6133 23.7022C18.4869 23.9525 18.3524 24.1989 18.2043 24.4816C18.2995 24.4719 18.3644 24.4735 18.4244 24.4574C23.0933 23.199 26.583 19.1168 27.1378 14.2657C27.8607 7.95021 23.6938 2.18801 17.531 0.981294C11.1288 -0.273079 4.87313 3.94963 3.5714 10.4024C3.55779 10.4711 3.54418 10.5405 3.52336 10.6076C3.45291 10.8394 3.2904 10.9339 3.06303 10.8806C2.84368 10.8289 2.74921 10.6609 2.79004 10.446C2.86129 10.0704 2.92774 9.69163 3.04302 9.32816C4.65697 4.24929 8.03779 1.09276 13.2527 0.186508C20.0672 -0.996787 26.4421 3.56516 27.7679 10.4113C29.0224 16.8899 25.082 23.3524 18.7767 25.1576C18.6742 25.1867 18.5725 25.2215 18.398 25.2756L18.3988 25.2748Z"
        fill="black"
      />
      <path
        d="M3.7027 23.7871C3.6971 24.1368 3.42811 24.3282 3.17993 24.199C2.74842 23.9736 2.32972 23.7233 1.91503 23.4672C1.72689 23.3509 1.69887 23.1546 1.80135 22.9648C1.90942 22.7653 2.10716 22.7177 2.29049 22.8154C2.7196 23.0448 3.1391 23.2952 3.55059 23.5553C3.63706 23.6102 3.67468 23.7434 3.7019 23.7879L3.7027 23.7871Z"
        fill="black"
      />
    </g>
    <defs>
      <clipPath id="clip0_600_5937">
        <rect width={28} height={29} fill="white" />
      </clipPath>
    </defs>
  </svg>
);
